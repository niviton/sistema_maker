#include <SoftwareSerial.h>
#include <Adafruit_Fingerprint.h>
#include <EEPROM.h>

// ==============================================
// CONFIGURA√á√ïES DE HARDWARE
// ==============================================
#define BUTTON_PIN     4       // bot√£o (opcional) usando INPUT_PULLUP
#define MAX_USERS      20
#define NAME_LENGTH    20

// Porta serial para o sensor biom√©trico
SoftwareSerial fingerSerial(2, 3);  // RX, TX
Adafruit_Fingerprint finger = Adafruit_Fingerprint(&fingerSerial);

// Pr√≥ximo ID livre para cadastro
int nextID = 1;

// ==============================================
// PROT√ìTIPOS DE FUN√á√ÉO
// ==============================================
uint8_t getFingerprintEnroll(int id);
int getFingerprintID();
void cadastrarDigital();
void apagarTodosOsAcessos();
void listarAcessos();
void removerAcesso(int id);

// EEPROM
void salvarNome(int id, const String &nome);
String getName(int id);
void salvarUltimoID(int id);
void carregarUltimoID();
bool getLastAction(int id);
void saveLastAction(int id, bool action);

// ==============================================
// SETUP INICIAL
// ==============================================
void setup() {
  Serial.begin(115200);
  fingerSerial.begin(57600);
  pinMode(BUTTON_PIN, INPUT_PULLUP);  // bot√£o ligado ao GND
  
  Serial.println("Iniciando sensor biometrico...");
  if (finger.verifyPassword()) {
    Serial.println("‚úÖ Sensor encontrado!");
  } else {
    Serial.println("‚ö†Ô∏è ERRO: Sensor NAO encontrado!");
    while (1);
  }

  carregarUltimoID();
  Serial.println("Comandos via Serial:");
  Serial.println("  cadastrar         -> cadastra nova digital");
  Serial.println("  apagar            -> apaga todos os acessos");
  Serial.println("  banco de dados    -> lista acessos cadastrados");
  Serial.println("  apagar id N       -> apaga acesso do ID N");
}

// ==============================================
// LOOP PRINCIPAL
// ==============================================
void loop() {
  // Cadastro via bot√£o (opcional)
  if (digitalRead(BUTTON_PIN) == LOW) {
    delay(100);
    cadastrarDigital();
    while (digitalRead(BUTTON_PIN) == LOW) { delay(10); }
  }

  // Comandos via Serial
  if (Serial.available()) {
    String cmd = Serial.readStringUntil('\n');
    cmd.trim();
    if (cmd.equalsIgnoreCase("apagar")) {
      apagarTodosOsAcessos();
    } 
    else if (cmd.equalsIgnoreCase("banco de dados")) {
      listarAcessos();
    } 
    else if (cmd.startsWith("apagar id")) {
      int idCmd = cmd.substring(9).toInt();
      if (idCmd > 0 && idCmd <= MAX_USERS) {
        removerAcesso(idCmd);
      } else {
        Serial.println("‚ö†Ô∏è ID invalido!");
      }
    }
    else if (cmd.equalsIgnoreCase("cadastrar")) {
      cadastrarDigital();
    }
  }

  // Reconhecimento de digital
  int id = getFingerprintID();
if (id > 0) {
  String nome = getName(id);
  if (nome.length() == 0) {
    Serial.println("üîí Digital desconhecida");
  } else {
    bool lastAction = getLastAction(id);
    String acao = lastAction ? "SAIDA" : "ENTRADA";

    Serial.print("[");
    Serial.print(acao);
    Serial.print("] ");
    Serial.println(nome);

    saveLastAction(id, !lastAction);
  }
  delay(2000);
}

}

// ==============================================
// FUN√á√ïES DE CADASTRO E LEITURA
// ==============================================
void cadastrarDigital() {
  if (nextID > MAX_USERS) nextID = 1;

  Serial.print("üìå Cadastrando ID: ");
  Serial.println(nextID);
  
  uint8_t res = getFingerprintEnroll(nextID);
  if (res != FINGERPRINT_OK) {
    Serial.println("‚ùå Falha no cadastro. Tente novamente.");
    return;
  }

  Serial.println("Digite o nome do usuario:");
  while (!Serial.available());
  String nome = Serial.readStringUntil('\n');
  nome.trim();
  if (nome.length() == 0) nome = "Usuario" + String(nextID);

  salvarNome(nextID, nome);
  salvarUltimoID(nextID);

  Serial.println("‚úÖ Cadastro concluido!");
  nextID++;
}

int getFingerprintID() {
  if (finger.getImage() != FINGERPRINT_OK) return -1;
  if (finger.image2Tz() != FINGERPRINT_OK) return -1;
  if (finger.fingerSearch() == FINGERPRINT_OK) {
    return finger.fingerID;
  }
  return -1;
}

uint8_t getFingerprintEnroll(int id) {
  int p;
  Serial.println("üëâ Coloque o dedo...");
  while ((p = finger.getImage()) != FINGERPRINT_OK) {
    if (p == FINGERPRINT_NOFINGER) delay(100);
    else return p;
  }
  Serial.println("üì∏ Capturado!");
  if (finger.image2Tz(1) != FINGERPRINT_OK) return p;

  Serial.println("‚úã Remova e reinsira o dedo...");
  delay(2000);
  while (finger.getImage() != FINGERPRINT_NOFINGER);
  while (finger.getImage() != FINGERPRINT_OK);

  if (finger.image2Tz(2) != FINGERPRINT_OK) return p;
  if (finger.createModel() != FINGERPRINT_OK) return p;
  return finger.storeModel(id);
}

// ==============================================
// FUN√á√ïES EEPROM
// ==============================================
void salvarNome(int id, const String &nome) {
  int addr = id * NAME_LENGTH;
  for (int i = 0; i < NAME_LENGTH; i++) {
    EEPROM.write(addr + i, i < nome.length() ? nome[i] : 0);
  }
}

String getName(int id) {
  int addr = id * NAME_LENGTH;
  char buf[NAME_LENGTH];
  for (int i = 0; i < NAME_LENGTH; i++) {
    buf[i] = EEPROM.read(addr + i);
  }
  return String(buf);
}

void salvarUltimoID(int id) {
  EEPROM.write(500, id);
}

void carregarUltimoID() {
  nextID = EEPROM.read(500);
  if (nextID < 1 || nextID > MAX_USERS) nextID = 1;
}

bool getLastAction(int id) {
  int addr = 400 + (id / 8);
  byte b = EEPROM.read(addr);
  return bitRead(b, id % 8);
}

void saveLastAction(int id, bool action) {
  int addr = 400 + (id / 8);
  byte b = EEPROM.read(addr);
  bitWrite(b, id % 8, action);
  EEPROM.write(addr, b);
}

// ==============================================
// FUN√á√ïES DE COMANDOS SERIAL
// ==============================================
void apagarTodosOsAcessos() {
  Serial.println("‚ö†Ô∏è Apagando todos os acessos...");
  for (int i = 1; i <= MAX_USERS; i++) {
    finger.deleteModel(i);
    salvarNome(i, "");
  }
  salvarUltimoID(1);
  Serial.println("‚úÖ Todos apagados!");
}

void listarAcessos() {
  Serial.println("üìú Banco de dados:");
  for (int i = 1; i <= MAX_USERS; i++) {
    String nome = getName(i);
    if (nome.length()) {
      Serial.print("ID ");
      Serial.print(i);
      Serial.print(" - ");
      Serial.println(nome);
    }
  }
}

void removerAcesso(int id) {
  Serial.print("üóëÔ∏è Removendo ID ");
  Serial.print(id);
  Serial.println("...");
  if (finger.deleteModel(id) == FINGERPRINT_OK) {
    salvarNome(id, "");
    Serial.println("‚úÖ Removido!");
  } else {
    Serial.println("‚ö†Ô∏è Erro ao remover.");
  }
}
