import csv
import os
import threading
import time
import json
import requests
from flask import Flask, render_template, request, redirect, url_for, flash, session
from datetime import datetime

# ===== Configurações Básicas =====
app = Flask(__name__)
app.secret_key = 'super_secret_key'

# Variável global para armazenar o nome reconhecido
usuario_atual = {'nome': ''}

# Arquivo de “buffer” onde o worker grava o último nome reconhecido
FINGERPRINT_BUFFER = 'fingerprint_buffer.json'

# Arquivo usado para simular comandos ao hardware (LED, relé)
COMANDO_FILE = 'comando.txt'

# Context processor para inserir 'is_admin' em todos os templates
@app.context_processor
def inject_is_admin():
    return {'is_admin': session.get('is_admin', False)}

# ===== Controle de LED (via arquivo de comando) =====
def controlar_led(on: bool):
    cmd = '1' if on else '0'
    try:
        with open(COMANDO_FILE, 'w') as f:
            f.write(cmd)
    except Exception as e:
        app.logger.error(f"Falha ao gravar comando serial: {e}")

# ===== Definição de arquivos de dados =====
DATA_FILES = {
    'bolsistas': 'bolsistas.csv',
    'visitas':   'visitas.csv',
    'pontos':    'pontos.csv',
    'estado':    'estado_lab.txt',
    'buffer':    'sheets_buffer.json'
}
SHEETS_WEBAPP_URL = (
    'https://script.google.com/macros/s/'
    'AKfycbwXd3B25eg-DXrem3KZ0Yel3HavuHlS8X5gXAgtCdl6DklQiu2fS-R6W2YQaeF2Jjix/exec'
)
ADMIN_PASSWORD = 'maker22'

# ===== Inicialização de arquivos =====
for key in ['visitas', 'bolsistas']:
    if not os.path.exists(DATA_FILES[key]):
        open(DATA_FILES[key], 'w').close()

if not os.path.exists(DATA_FILES['pontos']):
    with open(DATA_FILES['pontos'], 'w', newline='') as f:
        csv.writer(f).writerow(['Nome','ID','Data','Entrada','Saída','Duração(min)'])

if not os.path.exists(DATA_FILES['estado']):
    open(DATA_FILES['estado'], 'w').write('FECHADO')

if not os.path.exists(DATA_FILES['buffer']):
    open(DATA_FILES['buffer'], 'w').write(json.dumps([]))

if not os.path.exists(COMANDO_FILE):
    open(COMANDO_FILE, 'w').close()

# Cria o buffer de fingerprint vazio
if not os.path.exists(FINGERPRINT_BUFFER):
    open(FINGERPRINT_BUFFER, 'w').write(json.dumps({}))

# ===== Helpers de estado =====
def get_estado_lab():
    return open(DATA_FILES['estado']).read().strip().upper()

def set_estado_lab(novo_estado):
    open(DATA_FILES['estado'], 'w').write(novo_estado.strip().upper())

# ===== Buffer Google Sheets =====
buffer_lock = threading.Lock()

def load_buffer():
    with buffer_lock, open(DATA_FILES['buffer'],'r') as f:
        return json.load(f)

def save_buffer(buf):
    with buffer_lock, open(DATA_FILES['buffer'],'w') as f:
        json.dump(buf, f)

def enqueue_sheets(params):
    buf = load_buffer()
    buf.append(params)
    save_buffer(buf)

def try_flush_buffer():
    buf = load_buffer()
    remaining = []
    for p in buf:
        try:
            r = requests.get(SHEETS_WEBAPP_URL, params=p, timeout=5)
            r.raise_for_status()
        except:
            remaining.append(p)
    if len(remaining) != len(buf):
        save_buffer(remaining)

def _flush_thread():
    while True:
        try_flush_buffer()
        time.sleep(10)

threading.Thread(target=_flush_thread, daemon=True).start()

# ===== Autenticação =====
def login_required(f):
    from functools import wraps
    @wraps(f)
    def decorated(*args, **kwargs):
        if not session.get('is_admin'):
            return redirect(url_for('login'))
        return f(*args, **kwargs)
    return decorated

# ===== Thread de “escuta” do fingerprint_buffer.json =====
def monitorar_fingerprint_buffer():
    while True:
        try:
            with open(FINGERPRINT_BUFFER, 'r') as f:
                data = json.load(f)
            nome = data.get('nome', '').strip()
            if nome:
                usuario_atual['nome'] = nome
                # limpa para não recarregar sem nova digital
                open(FINGERPRINT_BUFFER, 'w').write(json.dumps({}))
            time.sleep(0.5)
        except Exception:
            time.sleep(1)

threading.Thread(target=monitorar_fingerprint_buffer, daemon=True).start()

# ===== Rotas =====
@app.errorhandler(404)
def not_found(e):
    return redirect(url_for('home'))

@app.route('/login', methods=['GET','POST'])
def login():
    if request.method == 'POST':
        if request.form.get('senha') == ADMIN_PASSWORD:
            session['is_admin'] = True
            flash('Login OK','success')
            return redirect(url_for('admin'))
        flash('Senha incorreta','danger')
    return render_template('login.html')

@app.route('/logout')
def logout():
    session.pop('is_admin', None)
    flash('Logout realizado','info')
    return redirect(url_for('home'))

@app.route('/')
def index():
    return render_template('index.html', estado=get_estado_lab())

@app.route('/home')
def home():
    return render_template('home.html', estado=get_estado_lab())

@app.route('/visitante', methods=['GET','POST'])
def visitante():
    estado = get_estado_lab()
    if request.method == 'POST':
        if estado != 'ABERTO':
            flash('Lab fechado','danger')
            return render_template('visitante.html', estado=estado)
        nome = request.form['nome']
        mat = request.form['matricula']
        mot = request.form['motivo']
        ts = datetime.now().strftime('%Y-%m-%d %H:%M:%S')
        with open(DATA_FILES['visitas'], 'a', newline='') as f:
            csv.writer(f).writerow([nome, mat, mot, ts])
        controlar_led(True)
        threading.Timer(5, lambda: controlar_led(False)).start()
        flash('Visitante registrado!','success')
        enqueue_sheets({'nome': nome,'id': mat,'acao': 'VISITA','motivo': mot,'datahora': ts})
        return render_template('visitante_success.html', nome=nome, estado=estado)
    return render_template('visitante.html', estado=get_estado_lab())

@app.route('/bolsista', methods=['GET','POST'])
def bolsista():
    if request.method == 'POST':
        nome = request.form['nome']
        mat = request.form['matricula']
        validado = False
        with open(DATA_FILES['bolsistas']) as f:
            for row in csv.reader(f):
                if row and row[0] == nome and row[1] == mat:
                    validado = True
                    break
        if not validado:
            flash('Não cadastrado','danger')
            return render_template('bolsista_fail.html')
        controlar_led(True)
        threading.Timer(5, lambda: controlar_led(False)).start()
        flash('Bolsista validado!','success')
        return redirect(url_for('bolsista_success', nome=nome, matricula=mat, estado=get_estado_lab()))
    return render_template('bolsista.html')

@app.route('/marcar_ponto', methods=['POST'])
def marcar_ponto():
    nome = request.form['nome']
    mat = request.form['matricula']
    acao = request.form['acao']
    now = datetime.now()
    d = now.strftime('%Y-%m-%d')
    t = now.strftime('%H:%M:%S')
    rows = list(csv.reader(open(DATA_FILES['pontos'],'r',newline='')))
    if acao == 'entrada':
        rows.append([nome, mat, d, t, '', ''])
        flash(f'Entrada: {d} {t}','success')
    else:
        updated = False
        from datetime import datetime as dt
        for i in range(len(rows)-1, 0, -1):
            r = rows[i]
            if r[0] == nome and r[1] == mat and r[4] == '':
                entrada = dt.strptime(f"{r[2]} {r[3]}", '%Y-%m-%d %H:%M:%S')
                dur = round((now - entrada).total_seconds() / 60, 2)
                r[4] = t
                r[5] = str(dur)
                flash(f'Saída: {d} {t} ({dur}min)','success')
                updated = True
                break
        if not updated:
            flash('Nenhuma entrada pendente','danger')
    with open(DATA_FILES['pontos'],'w',newline='') as f:
        csv.writer(f).writerows(rows)
    enqueue_sheets({'nome': nome,'id': mat,'acao': acao.upper(),'data': d,'hora': t})
    return render_template('bolsista_success.html', nome=nome, matricula=mat, estado=get_estado_lab())

@app.route('/bolsista_success')
def bolsista_success():
    return render_template(
        'bolsista_success.html',
        nome=request.args.get('nome'),
        matricula=request.args.get('matricula'),
        estado=request.args.get('estado')
    )

@app.route('/entrada_fingerprint')
def entrada_fingerprint():
    if usuario_atual['nome']:
        nome = usuario_atual['nome']
        estado = get_estado_lab()
        usuario_atual['nome'] = ''
        return render_template('bolsista_success.html', nome=nome, matricula='', estado=estado)
    return redirect(url_for('home'))

@app.route('/admin')
@login_required
def admin():
    return render_template('admin.html')

@app.route('/cadastrar_bolsista', methods=['POST'])
def cadastrar_bolsista():
    novo = request.form['nome']
    mat = request.form['matricula']
    with open(DATA_FILES['bolsistas'], 'a', newline='') as f:
        csv.writer(f).writerow([novo, mat])
    flash('Bolsista adicionado','success')
    return redirect(url_for('admin'))

@app.route('/remover_bolsista', methods=['POST'])
def remover_bolsista():
    chave = request.form['chave'].strip()
    rows = []
    removed = False
    with open(DATA_FILES['bolsistas']) as f:
        for r in csv.reader(f):
            if r and chave not in r:
                rows.append(r)
            else:
                removed = True
    with open(DATA_FILES['bolsistas'], 'w', newline='') as f:
        csv.writer(f).writerows(rows)
    flash('Removido' if removed else 'Não encontrado', 'success' if removed else 'danger')
    return redirect(url_for('admin'))

@app.route('/atualizar_estado', methods=['POST'])
def atualizar_estado():
    novo = request.form.get('estado')
    if novo:
        set_estado_lab(novo)
        flash(f'Estado atualizado: {novo}','info')
    else:
        flash('Nada alterado','warning')
    return redirect(url_for('index'))

# ===== Execução do servidor =====
if __name__ == '__main__':
    app.run(debug=True, host='0.0.0.0')
